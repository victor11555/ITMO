package cljtest.linear;

import cljtest.ClojureScript;
import clojure.lang.IPersistentVector;
import jstest.Engine;

import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 * @author Georgiy Korneev (kgeorgiy@kgeorgiy.info)
 */
public class LinearCuboidTest extends LinearBinaryTest {
    public static final BiConsumer<Engine.Result<IPersistentVector>, Number[][][]> CHECK_CUBOID = checker(CHECK_MATRIX);

    public static final ClojureScript.F<IPersistentVector> C_ADD = vectorFunction("c+");
    public static final ClojureScript.F<IPersistentVector> C_SUB = vectorFunction("c-");
    public static final ClojureScript.F<IPersistentVector> C_MUL = vectorFunction("c*");
    public static final ClojureScript.F<IPersistentVector> C_DIV = vectorFunction("cd");

    public static void main(final String... args) {
        new LinearCuboidTest().run();
    }

    private void testOps1(
            final Number[] add,
            final Number[] sub,
            final Number[] mul,
            final Number[] div,
            final Number[] arg1,
            final Number[] arg2
    ) {
        testOps(
                LinearBinaryTest::vector,
                this::assertVector,
                List.of(V_ADD, V_SUB, V_MUL, V_DIV),
                List.of(add, sub, mul, div),
                arg1, arg2
        );
    }

    private void testOps2(
            final Number[][] add,
            final Number[][] sub,
            final Number[][] mul,
            final Number[][] div,
            final Number[][] arg1,
            final Number[][] arg2
    ) {
        testOps(
                LinearBinaryTest::matrix,
                this::assertMatrix,
                List.of(M_ADD, M_SUB, M_MUL, M_DIV),
                List.of(add, sub, mul, div),
                arg1, arg2
        );
    }

    private void testOps3(
            final Number[][][] add,
            final Number[][][] sub,
            final Number[][][] mul,
            final Number[][][] div,
            final Number[][][] arg1,
            final Number[][][] arg2
    ) {
        testOps(
                c -> wrap(LinearTensorTest::matrix, c),
                (result, rows) -> assertResult(CHECK_CUBOID, result, rows),
                List.of(C_ADD, C_SUB, C_MUL, C_DIV),
                List.of(add, sub, mul, div),
                arg1, arg2
        );
    }


    private static <T> void testOps(
            final Function<T, Engine.Result<IPersistentVector>> wrap,
            final BiConsumer<Engine.Result<IPersistentVector>, T> check,
            final List<ClojureScript.F<IPersistentVector>> functions,
            final List<T> results,
            final T arg1,
            final T arg2
    ) {
        @SuppressWarnings("Convert2MethodRef")
        final Engine.Result<?>[] args = Stream.of(arg1, arg2).map(wrap).toArray(v -> new Engine.Result<?>[v]);
        IntStream.range(0, functions.size()).forEach(i -> check.accept(functions.get(i).call(args), results.get(i)));
    }


    @Override
    protected void test() {
        super.test();

        test1();
        test2();
        test3();
    }

    private void test1() {
        // Shape: 2x[1]
        testOps1(
                new Number[]{0.400},
                new Number[]{-18.600},
                new Number[]{-86.450},
                new Number[]{-0.958},
                new Number[]{-9.100},
                new Number[]{9.500}
        );

        // Shape: 2x[2]
        testOps1(
                new Number[]{15.700, 13.400},
                new Number[]{-2.900, 0.000},
                new Number[]{59.520, 44.890},
                new Number[]{0.688, 1.000},
                new Number[]{6.400, 6.700},
                new Number[]{9.300, 6.700}
        );

        // Shape: 2x[3]
        testOps1(
                new Number[]{-2.000, 10.100, 0.400},
                new Number[]{10.600, -2.500, -12.400},
                new Number[]{-27.090, 23.940, -38.400},
                new Number[]{-0.683, 0.603, -0.938},
                new Number[]{4.300, 3.800, -6.000},
                new Number[]{-6.300, 6.300, 6.400}
        );

    }

    private void test2() {
        // Shape: 2x[1, 1]
        testOps2(
                new Number[][]{{18.600}},
                new Number[][]{{-1.000}},
                new Number[][]{{86.240}},
                new Number[][]{{0.898}},
                new Number[][]{{8.800}},
                new Number[][]{{9.800}}
        );

        // Shape: 2x[2, 1]
        testOps2(
                new Number[][]{{7.600}, {1.800}},
                new Number[][]{{9.400}, {8.600}},
                new Number[][]{{-7.650}, {-17.680}},
                new Number[][]{{-9.444}, {-1.529}},
                new Number[][]{{8.500}, {5.200}},
                new Number[][]{{-0.900}, {-3.400}}
        );

        // Shape: 2x[3, 1]
        testOps2(
                new Number[][]{{-1.800}, {9.700}, {0.200}},
                new Number[][]{{11.000}, {-1.500}, {-18.600}},
                new Number[][]{{-29.440}, {22.960}, {-86.480}},
                new Number[][]{{-0.719}, {0.732}, {-0.979}},
                new Number[][]{{4.600}, {4.100}, {-9.200}},
                new Number[][]{{-6.400}, {5.600}, {9.400}}
        );

        // Shape: 2x[1, 2]
        testOps2(
                new Number[][]{{6.700, 5.500}},
                new Number[][]{{-0.700, 12.700}},
                new Number[][]{{11.100, -32.760}},
                new Number[][]{{0.811, -2.528}},
                new Number[][]{{3.000, 9.100}},
                new Number[][]{{3.700, -3.600}}
        );

        // Shape: 2x[2, 2]
        testOps2(
                new Number[][]{{5.000, 13.600}, {-3.600, -3.200}},
                new Number[][]{{-5.400, -4.000}, {-16.400, 13.800}},
                new Number[][]{{-1.040, 42.240}, {-64.000, -45.050}},
                new Number[][]{{-0.038, 0.545}, {-1.563, -0.624}},
                new Number[][]{{-0.200, 4.800}, {-10.000, 5.300}},
                new Number[][]{{5.200, 8.800}, {6.400, -8.500}}
        );

        // Shape: 2x[3, 2]
        testOps2(
                new Number[][]{{-2.100, -5.000}, {-12.200, 4.800}, {-7.600, -17.400}},
                new Number[][]{{-6.100, 12.800}, {3.800, -3.200}, {-12.200, -2.600}},
                new Number[][]{{-8.200, -34.710}, {33.600, 3.200}, {-22.770, 74.000}},
                new Number[][]{{-2.050, -0.438}, {0.525, 0.200}, {-4.304, 1.351}},
                new Number[][]{{-4.100, 3.900}, {-4.200, 0.800}, {-9.900, -10.000}},
                new Number[][]{{2.000, -8.900}, {-8.000, 4.000}, {2.300, -7.400}}
        );

        // Shape: 2x[1, 3]
        testOps2(
                new Number[][]{{6.300, -9.100, 17.600}},
                new Number[][]{{-12.700, -4.900, 2.000}},
                new Number[][]{{-30.400, 14.700, 76.440}},
                new Number[][]{{-0.337, 3.333, 1.256}},
                new Number[][]{{-3.200, -7.000, 9.800}},
                new Number[][]{{9.500, -2.100, 7.800}}
        );

        // Shape: 2x[2, 3]
        testOps2(
                new Number[][]{{3.000, 12.400, -1.200}, {3.400, 4.800, 9.600}},
                new Number[][]{{3.600, 4.000, -18.000}, {-14.400, -9.200, -0.600}},
                new Number[][]{{-0.990, 34.440, -80.640}, {-48.950, -15.400, 22.950}},
                new Number[][]{{-11.000, 1.952, -1.143}, {-0.618, -0.314, 0.882}},
                new Number[][]{{3.300, 8.200, -9.600}, {-5.500, -2.200, 4.500}},
                new Number[][]{{-0.300, 4.200, 8.400}, {8.900, 7.000, 5.100}}
        );

        // Shape: 2x[3, 3]
        testOps2(
                new Number[][]{{5.400, -10.500, 7.100}, {-10.800, 17.800, 10.300}, {8.000, -3.900, 3.600}},
                new Number[][]{{5.800, 8.300, 9.500}, {-3.800, -0.800, -5.100}, {-3.200, -12.900, 6.200}},
                new Number[][]{{-1.120, 10.340, -9.960}, {25.550, 79.050, 20.020}, {13.440, -37.800, -6.370}},
                new Number[][]{{-28.000, 0.117, -6.917}, {2.086, 0.914, 0.338}, {0.429, -1.867, -3.769}},
                new Number[][]{{5.600, -1.100, 8.300}, {-7.300, 8.500, 2.600}, {2.400, -8.400, 4.900}},
                new Number[][]{{-0.200, -9.400, -1.200}, {-3.500, 9.300, 7.700}, {5.600, 4.500, -1.300}}
        );

    }

    private void test3() {
        // Shape: 2x[1, 1, 1]
        testOps3(
                new Number[][][]{{{-0.700}}},
                new Number[][][]{{{-8.100}}},
                new Number[][][]{{{-16.280}}},
                new Number[][][]{{{-1.189}}},
                new Number[][][]{{{-4.400}}},
                new Number[][][]{{{3.700}}}
        );

        // Shape: 2x[2, 1, 1]
        testOps3(
                new Number[][][]{{{8.100}}, {{-2.500}}},
                new Number[][][]{{{1.900}}, {{16.500}}},
                new Number[][][]{{{15.500}}, {{-66.500}}},
                new Number[][][]{{{1.613}}, {{-0.737}}},
                new Number[][][]{{{5.000}}, {{7.000}}},
                new Number[][][]{{{3.100}}, {{-9.500}}}
        );

        // Shape: 2x[3, 1, 1]
        testOps3(
                new Number[][][]{{{-13.000}}, {{10.900}}, {{4.500}}},
                new Number[][][]{{{2.200}}, {{2.500}}, {{-14.300}}},
                new Number[][][]{{{41.040}}, {{28.140}}, {{-46.060}}},
                new Number[][][]{{{0.711}}, {{1.595}}, {{-0.521}}},
                new Number[][][]{{{-5.400}}, {{6.700}}, {{-4.900}}},
                new Number[][][]{{{-7.600}}, {{4.200}}, {{9.400}}}
        );

        // Shape: 2x[1, 2, 1]
        testOps3(
                new Number[][][]{{{-8.200}, {-8.200}}},
                new Number[][][]{{{11.600}, {6.400}}},
                new Number[][][]{{{-16.830}, {6.570}}},
                new Number[][][]{{{-0.172}, {0.123}}},
                new Number[][][]{{{1.700}, {-0.900}}},
                new Number[][][]{{{-9.900}, {-7.300}}}
        );

        // Shape: 2x[2, 2, 1]
        testOps3(
                new Number[][][]{{{-0.100}, {3.100}}, {{11.700}, {5.300}}},
                new Number[][][]{{{-18.900}, {16.500}}, {{4.300}, {-1.100}}},
                new Number[][][]{{{-89.300}, {-65.660}}, {{29.600}, {6.720}}},
                new Number[][][]{{{-1.011}, {-1.463}}, {{2.162}, {0.656}}},
                new Number[][][]{{{-9.500}, {9.800}}, {{8.000}, {2.100}}},
                new Number[][][]{{{9.400}, {-6.700}}, {{3.700}, {3.200}}}
        );

        // Shape: 2x[3, 2, 1]
        testOps3(
                new Number[][][]{{{-11.000}, {-15.000}}, {{-11.700}, {-0.900}}, {{-10.500}, {-1.000}}},
                new Number[][][]{{{-6.800}, {2.600}}, {{-8.300}, {-15.900}}, {{7.500}, {15.800}}},
                new Number[][][]{{{18.690}, {54.560}}, {{17.000}, {-63.000}}, {{13.500}, {-62.160}}},
                new Number[][][]{{{4.238}, {0.705}}, {{5.882}, {-1.120}}, {{0.167}, {-0.881}}},
                new Number[][][]{{{-8.900}, {-6.200}}, {{-10.000}, {-8.400}}, {{-1.500}, {7.400}}},
                new Number[][][]{{{-2.100}, {-8.800}}, {{-1.700}, {7.500}}, {{-9.000}, {-8.400}}}
        );

        // Shape: 2x[1, 3, 1]
        testOps3(
                new Number[][][]{{{2.500}, {-9.000}, {9.500}}},
                new Number[][][]{{{-14.500}, {8.800}, {2.300}}},
                new Number[][][]{{{-51.000}, {0.890}, {21.240}}},
                new Number[][][]{{{-0.706}, {0.011}, {1.639}}},
                new Number[][][]{{{-6.000}, {-0.100}, {5.900}}},
                new Number[][][]{{{8.500}, {-8.900}, {3.600}}}
        );

        // Shape: 2x[2, 3, 1]
        testOps3(
                new Number[][][]{{{0.300}, {9.300}, {-3.700}}, {{2.300}, {-2.800}, {-1.100}}},
                new Number[][][]{{{-12.500}, {5.700}, {-8.900}}, {{-13.900}, {-7.200}, {17.300}}},
                new Number[][][]{{{-39.040}, {13.500}, {-16.380}}, {{-46.980}, {-11.000}, {-74.520}}},
                new Number[][][]{{{-0.953}, {4.167}, {-2.423}}, {{-0.716}, {-2.273}, {-0.880}}},
                new Number[][][]{{{-6.100}, {7.500}, {-6.300}}, {{-5.800}, {-5.000}, {8.100}}},
                new Number[][][]{{{6.400}, {1.800}, {2.600}}, {{8.100}, {2.200}, {-9.200}}}
        );

        // Shape: 2x[3, 3, 1]
        testOps3(
                new Number[][][]{{{2.100}, {13.700}, {-11.300}}, {{0.600}, {6.600}, {13.500}}, {{-2.900}, {2.400}, {3.300}}},
                new Number[][][]{{{8.500}, {5.100}, {7.900}}, {{-14.200}, {9.400}, {-4.700}}, {{10.100}, {14.000}, {-14.300}}},
                new Number[][][]{{{-16.960}, {40.420}, {16.320}}, {{-50.320}, {-11.200}, {40.040}}, {{-23.400}, {-47.560}, {-48.400}}},
                new Number[][][]{{{-1.656}, {2.186}, {0.177}}, {{-0.919}, {-5.714}, {0.484}}, {{-0.554}, {-1.414}, {-0.625}}},
                new Number[][][]{{{5.300}, {9.400}, {-1.700}}, {{-6.800}, {8.000}, {4.400}}, {{3.600}, {8.200}, {-5.500}}},
                new Number[][][]{{{-3.200}, {4.300}, {-9.600}}, {{7.400}, {-1.400}, {9.100}}, {{-6.500}, {-5.800}, {8.800}}}
        );

        // Shape: 2x[1, 1, 2]
        testOps3(
                new Number[][][]{{{0.300, 1.100}}},
                new Number[][][]{{{4.100, -7.100}}},
                new Number[][][]{{{-4.180, -12.300}}},
                new Number[][][]{{{-1.158, -0.732}}},
                new Number[][][]{{{2.200, -3.000}}},
                new Number[][][]{{{-1.900, 4.100}}}
        );

        // Shape: 2x[2, 1, 2]
        testOps3(
                new Number[][][]{{{-1.700, -2.100}}, {{-4.300, -9.800}}},
                new Number[][][]{{{14.100, -3.700}}, {{10.900, 8.000}}},
                new Number[][][]{{{-48.980, -2.320}}, {{-25.080, 8.010}}},
                new Number[][][]{{{-0.785, -3.625}}, {{-0.434, 0.101}}},
                new Number[][][]{{{6.200, -2.900}}, {{3.300, -0.900}}},
                new Number[][][]{{{-7.900, 0.800}}, {{-7.600, -8.900}}}
        );

        // Shape: 2x[3, 1, 2]
        testOps3(
                new Number[][][]{{{0.300, 6.800}}, {{13.800, -8.500}}, {{-2.200, -16.000}}},
                new Number[][][]{{{1.900, 2.800}}, {{-5.600, -2.900}}, {{15.800, 3.200}}},
                new Number[][][]{{{-0.880, 9.600}}, {{39.770, 15.960}}, {{-61.200, 61.440}}},
                new Number[][][]{{{-1.375, 2.400}}, {{0.423, 2.036}}, {{-0.756, 0.667}}},
                new Number[][][]{{{1.100, 4.800}}, {{4.100, -5.700}}, {{6.800, -6.400}}},
                new Number[][][]{{{-0.800, 2.000}}, {{9.700, -2.800}}, {{-9.000, -9.600}}}
        );

        // Shape: 2x[1, 2, 2]
        testOps3(
                new Number[][][]{{{5.300, -3.200}, {14.800, 5.900}}},
                new Number[][][]{{{-5.700, -8.000}, {-4.000, 4.500}}},
                new Number[][][]{{{-1.100, -13.440}, {50.760, 3.640}}},
                new Number[][][]{{{-0.036, -2.333}, {0.574, 7.429}}},
                new Number[][][]{{{-0.200, -5.600}, {5.400, 5.200}}},
                new Number[][][]{{{5.500, 2.400}, {9.400, 0.700}}}
        );

        // Shape: 2x[2, 2, 2]
        testOps3(
                new Number[][][]{{{14.200, -4.600}, {-10.500, 13.000}}, {{12.500, -12.900}, {1.100, -5.600}}},
                new Number[][][]{{{-4.200, -8.000}, {-7.900, -6.600}}, {{-2.300, -2.100}, {15.500, 9.800}}},
                new Number[][][]{{{46.000, -10.710}, {11.960, 31.360}}, {{37.740, 40.500}, {-59.760, -16.170}}},
                new Number[][][]{{{0.543, -3.706}, {7.077, 0.327}}, {{0.689, 1.389}, {-1.153, -0.273}}},
                new Number[][][]{{{5.000, -6.300}, {-9.200, 3.200}}, {{5.100, -7.500}, {8.300, 2.100}}},
                new Number[][][]{{{9.200, 1.700}, {-1.300, 9.800}}, {{7.400, -5.400}, {-7.200, -7.700}}}
        );

        // Shape: 2x[3, 2, 2]
        testOps3(
                new Number[][][]{{{0.300, 16.000}, {3.200, 12.000}}, {{-5.500, -1.000}, {13.700, -16.000}}, {{17.700, 12.100}, {-2.400, -11.300}}},
                new Number[][][]{{{18.100, 3.600}, {0.600, -7.000}}, {{-6.700, -11.200}, {-4.900, -0.200}}, {{-1.700, -2.100}, {-2.600, 7.500}}},
                new Number[][][]{{{-81.880, 60.760}, {2.470, 23.750}}, {{-3.660, -31.110}, {40.920, 63.990}}, {{77.600, 35.500}, {-0.250, 17.860}}},
                new Number[][][]{{{-1.034, 1.581}, {1.462, 0.263}}, {{-10.167, -1.196}, {0.473, 1.025}}, {{0.825, 0.704}, {-25.000, 0.202}}},
                new Number[][][]{{{9.200, 9.800}, {1.900, 2.500}}, {{-6.100, -6.100}, {4.400, -8.100}}, {{8.000, 5.000}, {-2.500, -1.900}}},
                new Number[][][]{{{-8.900, 6.200}, {1.300, 9.500}}, {{0.600, 5.100}, {9.300, -7.900}}, {{9.700, 7.100}, {0.100, -9.400}}}
        );

        // Shape: 2x[1, 3, 2]
        testOps3(
                new Number[][][]{{{4.300, 0.300}, {0.100, 15.900}, {0.300, 12.200}}},
                new Number[][][]{{{9.700, 6.900}, {16.300, -0.700}, {-11.300, -3.600}}},
                new Number[][][]{{{-18.900, -11.880}, {-66.420, 63.080}, {-31.900, 33.970}}},
                new Number[][][]{{{-2.593, -1.091}, {-1.012, 0.916}, {-0.948, 0.544}}},
                new Number[][][]{{{7.000, 3.600}, {8.200, 7.600}, {-5.500, 4.300}}},
                new Number[][][]{{{-2.700, -3.300}, {-8.100, 8.300}, {5.800, 7.900}}}
        );

        // Shape: 2x[2, 3, 2]
        testOps3(
                new Number[][][]{{{-6.300, 8.300}, {-7.600, 10.900}, {-1.800, -3.700}}, {{-11.400, -10.300}, {17.800, 11.600}, {-6.400, -10.500}}},
                new Number[][][]{{{11.500, -5.700}, {8.800, 5.500}, {4.000, -8.900}}, {{4.200, 2.500}, {1.400, -4.800}, {12.600, -5.300}}},
                new Number[][][]{{{-23.140, 9.100}, {-4.920, 22.140}, {-3.190, -16.380}}, {{28.080, 24.960}, {78.720, 27.880}, {-29.450, 20.540}}},
                new Number[][][]{{{-0.292, 0.186}, {-0.073, 3.037}, {-0.379, -2.423}}, {{0.462, 0.609}, {1.171, 0.415}, {-0.326, 3.038}}},
                new Number[][][]{{{2.600, 1.300}, {0.600, 8.200}, {1.100, -6.300}}, {{-3.600, -3.900}, {9.600, 3.400}, {3.100, -7.900}}},
                new Number[][][]{{{-8.900, 7.000}, {-8.200, 2.700}, {-2.900, 2.600}}, {{-7.800, -6.400}, {8.200, 8.200}, {-9.500, -2.600}}}
        );

        // Shape: 2x[3, 3, 2]
        testOps3(
                new Number[][][]{{{-2.900, -0.200}, {-3.100, 3.900}, {-4.400, 4.500}}, {{3.900, 10.900}, {-14.100, -9.300}, {-4.800, -1.900}}, {{18.400, -1.800}, {12.000, -0.600}, {-4.600, 16.400}}},
                new Number[][][]{{{14.300, -12.400}, {-0.500, 14.900}, {1.800, -8.300}}, {{5.900, 0.500}, {-2.100, 2.300}, {11.000, 6.700}}, {{0.000, 17.400}, {3.000, 17.200}, {2.600, 3.000}}},
                new Number[][][]{{{-49.020, -38.430}, {2.340, -51.700}, {4.030, -12.160}}, {{-4.900, 29.640}, {48.600, 20.300}, {-24.490, -10.320}}, {{84.640, -74.880}, {33.750, -73.870}, {3.600, 64.990}}},
                new Number[][][]{{{-0.663, -1.033}, {1.385, -1.709}, {0.419, -0.297}}, {{-4.900, 1.096}, {1.350, 0.603}, {-0.392, -0.558}}, {{1.000, -0.813}, {1.667, -0.933}, {0.278, 1.448}}},
                new Number[][][]{{{5.700, -6.300}, {-1.800, 9.400}, {-1.300, -1.900}}, {{4.900, 5.700}, {-8.100, -3.500}, {3.100, 2.400}}, {{9.200, 7.800}, {7.500, 8.300}, {-1.000, 9.700}}},
                new Number[][][]{{{-8.600, 6.100}, {-1.300, -5.500}, {-3.100, 6.400}}, {{-1.000, 5.200}, {-6.000, -5.800}, {-7.900, -4.300}}, {{9.200, -9.600}, {4.500, -8.900}, {-3.600, 6.700}}}
        );

        // Shape: 2x[1, 1, 3]
        testOps3(
                new Number[][][]{{{15.400, -3.800, -5.900}}},
                new Number[][][]{{{4.200, -2.000, -6.700}}},
                new Number[][][]{{{54.880, 2.610, -2.520}}},
                new Number[][][]{{{1.750, 3.222, -15.750}}},
                new Number[][][]{{{9.800, -2.900, -6.300}}},
                new Number[][][]{{{5.600, -0.900, 0.400}}}
        );

        // Shape: 2x[2, 1, 3]
        testOps3(
                new Number[][][]{{{-2.000, -3.400, 11.000}}, {{7.000, -8.400, -8.300}}},
                new Number[][][]{{{11.600, -2.000, 8.600}}, {{-5.400, 5.800, -5.300}}},
                new Number[][][]{{{-32.640, 1.890, 11.760}}, {{4.960, 9.230, 10.200}}},
                new Number[][][]{{{-0.706, 3.857, 8.167}}, {{0.129, 0.183, 4.533}}},
                new Number[][][]{{{4.800, -2.700, 9.800}}, {{0.800, -1.300, -6.800}}},
                new Number[][][]{{{-6.800, -0.700, 1.200}}, {{6.200, -7.100, -1.500}}}
        );

        // Shape: 2x[3, 1, 3]
        testOps3(
                new Number[][][]{{{-5.100, -0.200, 9.100}}, {{-10.900, 5.000, 3.300}}, {{5.700, -8.700, -0.300}}},
                new Number[][][]{{{-10.700, -2.400, 7.900}}, {{1.300, 5.400, 4.900}}, {{6.900, 5.100, 13.100}}},
                new Number[][][]{{{-22.120, -1.430, 5.100}}, {{29.280, -1.040, -3.280}}, {{-3.780, 12.420, -42.880}}},
                new Number[][][]{{{-2.821, -1.182, 14.167}}, {{0.787, -26.000, -5.125}}, {{-10.500, 0.261, -0.955}}},
                new Number[][][]{{{-7.900, -1.300, 8.500}}, {{-4.800, 5.200, 4.100}}, {{6.300, -1.800, 6.400}}},
                new Number[][][]{{{2.800, 1.100, 0.600}}, {{-6.100, -0.200, -0.800}}, {{-0.600, -6.900, -6.700}}}
        );

        // Shape: 2x[1, 2, 3]
        testOps3(
                new Number[][][]{{{-2.000, -2.600, -5.400}, {-5.100, 1.900, -15.800}}},
                new Number[][][]{{{-4.200, 12.200, -2.800}, {-8.900, -6.300, 1.200}}},
                new Number[][][]{{{-3.410, -35.520, 5.330}, {-13.300, -9.020, 62.050}}},
                new Number[][][]{{{-2.818, -0.649, 3.154}, {-3.684, -0.537, 0.859}}},
                new Number[][][]{{{-3.100, 4.800, -4.100}, {-7.000, -2.200, -7.300}}},
                new Number[][][]{{{1.100, -7.400, -1.300}, {1.900, 4.100, -8.500}}}
        );

        // Shape: 2x[2, 2, 3]
        testOps3(
                new Number[][][]{{{2.800, -5.500, -8.200}, {3.100, -9.000, 12.100}}, {{-1.000, 5.400, 15.400}, {7.000, 1.800, -11.800}}},
                new Number[][][]{{{8.800, 2.900, -1.200}, {15.100, 1.400, -1.100}}, {{5.200, -7.200, 0.400}, {-4.600, 6.000, -5.800}}},
                new Number[][][]{{{-17.400, 5.460, 16.450}, {-54.600, 19.760, 36.300}}, {{-6.510, -5.670, 59.250}, {6.960, -8.190, 26.400}}},
                new Number[][][]{{{-1.933, 0.310, 1.343}, {-1.517, 0.731, 0.833}}, {{-0.677, -0.143, 1.053}, {0.207, -1.857, 2.933}}},
                new Number[][][]{{{5.800, -1.300, -4.700}, {9.100, -3.800, 5.500}}, {{2.100, -0.900, 7.900}, {1.200, 3.900, -8.800}}},
                new Number[][][]{{{-3.000, -4.200, -3.500}, {-6.000, -5.200, 6.600}}, {{-3.100, 6.300, 7.500}, {5.800, -2.100, -3.000}}}
        );

        // Shape: 2x[3, 2, 3]
        testOps3(
                new Number[][][]{{{-2.500, -3.600, 1.300}, {4.400, 4.900, 7.000}}, {{-6.000, 16.400, 3.100}, {-10.200, 17.400, -1.800}}, {{1.900, 1.500, -1.100}, {-5.500, -14.300, -6.200}}},
                new Number[][][]{{{-10.900, 14.000, 5.100}, {-9.200, -12.700, -10.600}}, {{-2.400, 0.400, 7.900}, {-0.600, -1.000, 7.600}}, {{10.100, -13.500, 0.100}, {-5.100, 1.900, -11.600}}},
                new Number[][][]{{{-28.140, -45.760, -6.080}, {-16.320, -34.320, -15.840}}, {{7.560, 67.200, -13.200}, {25.920, 75.440, -13.630}}, {{-24.600, -45.000, 0.300}, {1.060, 50.220, -24.030}}},
                new Number[][][]{{{-1.595, -0.591, -1.684}, {-0.353, -0.443, -0.205}}, {{2.333, 1.050, -2.292}, {1.125, 0.891, -0.617}}, {{-1.463, -0.800, 0.833}, {26.500, 0.765, -3.296}}},
                new Number[][][]{{{-6.700, 5.200, 3.200}, {-2.400, -3.900, -1.800}}, {{-4.200, 8.400, 5.500}, {-5.400, 8.200, 2.900}}, {{6.000, -6.000, -0.500}, {-5.300, -6.200, -8.900}}},
                new Number[][][]{{{4.200, -8.800, -1.900}, {6.800, 8.800, 8.800}}, {{-1.800, 8.000, -2.400}, {-4.800, 9.200, -4.700}}, {{-4.100, 7.500, -0.600}, {-0.200, -8.100, 2.700}}}
        );

        // Shape: 2x[1, 3, 3]
        testOps3(
                new Number[][][]{{{-6.700, 9.600, -4.900}, {6.600, -11.700, 5.200}, {-4.000, 10.500, 9.400}}},
                new Number[][][]{{{7.900, -1.000, -13.300}, {-5.800, -4.500, -13.400}, {-15.400, 8.700, -2.800}}},
                new Number[][][]{{{-4.380, 22.790, -38.220}, {2.480, 29.160, -38.130}, {-55.290, 8.640, 20.130}}},
                new Number[][][]{{{-0.082, 0.811, -2.167}, {0.065, 2.250, -0.441}, {-1.702, 10.667, 0.541}}},
                new Number[][][]{{{0.600, 4.300, -9.100}, {0.400, -8.100, -4.100}, {-9.700, 9.600, 3.300}}},
                new Number[][][]{{{-7.300, 5.300, 4.200}, {6.200, -3.600, 9.300}, {5.700, 0.900, 6.100}}}
        );

        // Shape: 2x[2, 3, 3]
        testOps3(
                new Number[][][]{{{-3.000, 10.000, -5.700}, {3.700, -0.900, -2.200}, {-11.900, 9.800, 9.900}}, {{-3.800, 4.900, 9.800}, {-2.100, 16.300, 4.300}, {14.500, 9.300, -6.100}}},
                new Number[][][]{{{-13.800, -6.800, 0.700}, {5.300, 3.500, -13.200}, {0.900, 8.200, 8.500}}, {{7.800, -14.300, -4.400}, {-7.100, -1.300, 11.500}, {2.300, 9.700, 12.500}}},
                new Number[][][]{{{-45.360, 13.440, 8.000}, {-3.600, -2.860, -42.350}, {35.200, 7.200, 6.440}}, {{-11.600, -45.120, 19.170}, {-11.500, 66.000, -28.440}, {51.240, -1.900, -29.760}}},
                new Number[][][]{{{-1.556, 0.190, 0.781}, {-5.625, -0.591, -1.400}, {0.859, 11.250, 13.143}}, {{-0.345, -0.490, 0.380}, {-1.840, 0.852, -2.194}, {1.377, -47.500, -0.344}}},
                new Number[][][]{{{-8.400, 1.600, -2.500}, {4.500, 1.300, -7.700}, {-5.500, 9.000, 9.200}}, {{2.000, -4.700, 2.700}, {-4.600, 7.500, 7.900}, {8.400, 9.500, 3.200}}},
                new Number[][][]{{{5.400, 8.400, -3.200}, {-0.800, -2.200, 5.500}, {-6.400, 0.800, 0.700}}, {{-5.800, 9.600, 7.100}, {2.500, 8.800, -3.600}, {6.100, -0.200, -9.300}}}
        );

        // Shape: 2x[3, 3, 3]
        testOps3(
                new Number[][][]{{{-5.500, -13.500, 14.100}, {0.500, 0.000, 9.500}, {13.600, -2.100, 5.900}}, {{-10.900, -1.800, -14.000}, {5.500, -1.500, 5.100}, {1.500, 4.200, 8.300}}, {{5.600, 9.200, 9.500}, {-4.600, -2.700, -8.400}, {-1.500, 3.500, -5.500}}},
                new Number[][][]{{{-13.100, -0.700, 4.900}, {-10.900, 7.800, -9.900}, {2.000, -10.300, 3.300}}, {{-1.700, -0.200, -4.000}, {11.900, 1.300, 8.300}, {-17.500, 11.400, 5.300}}, {{1.000, 6.200, -2.500}, {-5.400, 15.900, -1.600}, {3.500, -3.100, -14.300}}},
                new Number[][][]{{{-35.340, 45.440, 43.700}, {-29.640, -15.210, -1.940}, {45.240, -25.420, 5.980}}, {{28.980, 0.800, 45.000}, {-27.840, 0.140, -10.720}, {-76.000, -28.080, 10.200}}, {{7.590, 11.550, 21.000}, {-2.000, -61.380, 17.000}, {-2.500, 0.660, -43.560}}},
                new Number[][][]{{{-2.447, 1.109, 2.065}, {-0.912, -1.000, -0.021}, {1.345, -1.512, 3.538}}, {{1.370, 1.250, 1.800}, {-2.719, 0.071, -4.188}, {-0.842, -2.167, 4.533}}, {{1.435, 5.133, 0.583}, {-12.500, -0.710, 1.471}, {-0.400, 0.061, -2.250}}},
                new Number[][][]{{{-9.300, -7.100, 9.500}, {-5.200, 3.900, -0.200}, {7.800, -6.200, 4.600}}, {{-6.300, -1.000, -9.000}, {8.700, -0.100, 6.700}, {-8.000, 7.800, 6.800}}, {{3.300, 7.700, 3.500}, {-5.000, 6.600, -5.000}, {1.000, 0.200, -9.900}}},
                new Number[][][]{{{3.800, -6.400, 4.600}, {5.700, -3.900, 9.700}, {5.800, 4.100, 1.300}}, {{-4.600, -0.800, -5.000}, {-3.200, -1.400, -1.600}, {9.500, -3.600, 1.500}}, {{2.300, 1.500, 6.000}, {0.400, -9.300, -3.400}, {-2.500, 3.300, 4.400}}}
        );

    }
}
